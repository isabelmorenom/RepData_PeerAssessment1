plot(airquality$Wind,airquality$Ozone,set="n")
plot(airquality$Wind,airquality$Ozone,type="n")
title(main="Wind and Ozone in NYC")
may<-subset(airquality,Month==5)
points(may$Wind,may$Ozone,col="blue",pch=3)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay<-subset(airquality,Month!=5)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(h=mean(airquality$Wind),lty=2.lwd=2)
abline(h=mean(airquality$Wind),lty=2.lwy=2)
abline(h=mean(airquality$Wind),lty=2,lwd=2)
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Win,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow=c(1,3,mar=c(4, 4, 2, 1), oma =c(0, 0, 2, 0)))
par(mfrow=c(1,3),mar=c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp,airquality$Ozone,main= "Ozone and Temperature")
mtext("Ozone and Weather in New York City",outer=TRUE)
swirl()
exit
quit
logout
exit
quit
getwd()
setwd("C:/Users/Isabel/gitrepos/ExData_Plotting1")
source('C:/Users/Isabel/gitrepos/ExData_Plotting1/plot4.R', echo=TRUE)
source('C:/Users/Isabel/gitrepos/ExData_Plotting1/plot4.R', echo=TRUE)
source('C:/Users/Isabel/gitrepos/ExData_Plotting1/plot1.R', echo=TRUE)
library(swirl)
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=.4,col="red")
5
abline(h=.05,col="red")
12
abline(h=.05,col="green")
dist(dFsm)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
apply(distTmp,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy,pch=8,cex=2,col=cols1)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,wich.min)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame,centers=3)
kmObj$iter
plot(x,y,col= kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R" )
source("addPatt.R",equal=TRUE)
source("addPatt.R",loca=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag  %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2[,1-2]
svd2[,2]
svd2[,1:2]
svd2$v[,1:2]
svd2$d
dim(faceData    )
a1<-(svd1$u[,1]*svd1$d[1])%*%t(svd1$v[1])
a1<-(svd1$u[,1]*svd1$d[1])%*%t(svd1$v[,1])
myImage(a1)
a2<-svd1$u[,1:2]%*%svd1$d[1:2])%*%t(svd1$v[,1:2])
a2<-svd1$u[,1:2]%*%svd1$d[1:2]%*%t(svd1$v[,1:2])
a2<-svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
image(a2)
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
)
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10])
)
dim(ssd)
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject)))
sum(table(ssd$subject))
table(ssd$activity)
sub1<-subset(ssd,subject==1)
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
mdist(sub1[,1:3])
dist(sub1[,1:3])
mdist <- dist(sub1[,1:3])
hclustering<-hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
mdist<-dist(sub1[,10:12])
hclustering<-hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
svd1<-svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon<-which.max(svd1$v)
maxCon<-which.max(which.max(svd1$v[,2]))
maxCon <- which.max(svd1$v[,2])
mdist<-dist(concat(sub1[,10:12],maxCon))
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering<-hclust(mdist)
myplclust(hclustering,lab.col= unclass(sub1$activity))
names(sub1[maxCon])
kClust<-kmeans((sub1[, -c(562, 563)],centers=6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster,sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6,nstart=100)
table(kClust$cluster,sub1$activity)
dim(kClust$centers)
laying<-which(kClust$size==29)
plot(kClust$centers[laying,1:12],pch=19,ylab="Laying Cluster")
names(sub1[,1:3])
walkdown<-which(kClust$size==49)
plot(kClust$centers[walkdown,1:12],pch=19,ylab="Walkdown Cluster")
?%in%
??%in%
quit
?%in%
swirl()
dim(pm0)
head(pm0)
cnames
cnames<-strsplit(cnames,'|',na.rm=TRUE)
cnames<-strsplit(cnames,'|',fixed=TRUE)
cnames
names(pm0)<-make.names(cnames[[1]][wcol])
head(pm0)
x0<-pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1)<-make.names(cnames[[1]][wcol])
dim(pm1)
x1<-pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
negative<-x1<0
sum(negative,na.rm=TRUE)
mean(sum(negative,na.rm=TRUE))
mean(negative, na.rm = TRUE)
dates<-pm1$Date
str(dates)
dates<-as.character(dates,"%Y%m%d")
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates,"month")
hist(dates[negative],"month")
str(site0)
both<-intersect(site0,site1)
both
head(pm0)
cnt0<-subset(pm0,state.Code==36&county.site %in% both)
cnt0<-subset(pm0,County.Code==36&county.site %in% both)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub<-subset(cnt0,County.Code==63&Site.ID==2008)
pm1sub<-subset(cnt1,County.Code==63&Site.ID==2008)
x0sub<-pm0sub$Sample.Value
x1sub<-pm1sub$Sample.Value
dates0<-as.Date(as.character(pm0sub$Date),"%Y%m%d")
dates1<-as.Date(as.character(pm1sub$Date),"%Y%m%d")
par(mfrow=c(1,2))
par(mfrow=c(1,2),mar=c(4,4,2,1))
plot(dates0,x0sub,pch=20)
abline(h=median(x0sub,na.rm=T),lwd=2)
abline(h = median(x0sub, na.rm = TRUE),lwd=2)
plot(dates,x1sub,pch=20)
plot(dates1,x1sub,pch=20)
abline(h = median(x1sub, na.rm = TRUE),lwd=2)
rng<-range(x0sub,x1sub,na.rm=TRUE)
rng
mn0<-(pm0,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
mn0<-with(pm0,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn0)
mn1<-with(pm1,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0<-data.frame(state=names(mn0),mean(mn0))
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg<-merge(d0,d1,by="state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1, 52), mrg[, 2], xlim = c(.5, 2.5)))
with(mrg, points(rep(2, 52), mrg[, 3]))
segments(rep(1, 52), mrg[, 2], rep(2, 52), mrg[, 3])
mrg[mrg$mean.x < mrg$mean.y, ]
logout
exit
logoff
exit
setwd("C:/Users/Isabel/gitrepos/RepData_PeerAssessment1")
```{dat = read.csv('activity.csv', header = T)
unzip("activity.zip")
dat = read.csv('activity.csv', header = T)
names(dat)
str(dat)
head(dat)}
head(dat)
* Process/transform the data (if necessary) into a format suitable for your analysis.
* Process/transform the data (if necessary) into a format suitable for your analysis.
* Process/transform the data (if necessary) into a format suitable for your analysis.
* Process/transform the data (if necessary) into a format suitable for your analysis.
* Process/transform the data (if necessary) into a format suitable for your analysis
```{
totalSteps<-aggregate(steps~date,data=dat,sum,na.rm=TRUE)
}
## Loading and preprocessing the data
* Load the data
```
unzip("activity.zip")
dat = read.csv('activity.csv', header = T)
names(dat)
str(dat)
head(dat)
```
* Process/transform the data (if necessary) into a format suitable for your analysis
```
totalSteps<-aggregate(steps~date,data=dat,sum,na.rm=TRUE)
```
```
```
## Loading and preprocessing the data
* Load the data
```
unzip("activity.zip")
dat = read.csv('activity.csv', header = T)
names(dat)
str(dat)
head(dat)
```
* Process/transform the data (if necessary) into a format suitable for your analysis
```
total<-aggregate(steps~date,data=dat,sum,na.rm=TRUE)
```
str(total)
* The median total number of steps taken per day is `r media`.
promedio<-round(mean(total$steps),1)
media<-round(median(total$steps),1)
mean(total$steps)
round(mean(total$steps),0)
unzip("activity.zip")
dat = read.csv('activity.csv', header = T)
names(dat)
str(dat)
head(dat)
total<-aggregate(steps~date,data=dat,sum,na.rm=TRUE)
head(total)
hist(total$date)
hist(total$steps)
hist(as.numeric(total$date))
total$date
count(total$date)
frequency(total$steps)
min(total$steps)
unique(total$steps)
stepsInterval<-aggregate(steps~interval,data=dat,mean,na.rm=TRUE)
head(stepsInterval)
head(dat)
head(dat, 24)
head(dat, 60)
head(dat, 65)
head(dat, 100)
head(stepsInterval)
head(stepsInterval,815)
stepsInterval[835]
stepsInterval[835,]
stepsInterval[stepsInteval==835,]
stepsInterval[stepsInterval==835,]
row(stepsInterval[stepsInterval==835,])
row(stepsInterval$interval==835)
row(sterpInteval)
row(sterpInterval)
row(stepsInterval)
row(stepsInterval[stepsInterval$interval==835])
row(stepsInterval[stepsInterval$interval==835,])
row(stepsInterval$interval==835)
which.max(stepsInterval$interval)
which.min(stepsInterval$interval)
plot(stepsInterval,type=l)
plot(stepsInterval,type="l")
row(stepsInterval$interval==835)
row(stepsInterval[stepsInterval$interval==835,])
row(stepsInterval[stepsInterval$interval==835])
row(stepsInterval[stepsInterval==835,])
stepsInterval[stepsInteval==835,]
row(stepsInterval[stepsInterval==835,])
row(stepsInterval$interval==835)
stepsInterval$interval==835
stepsInterval[stepsInterval$interval==835,]
kk<-stepsInterval[stepsInterval$interval==835,]
kk
table (interval,steps)
table (stepsInterval$interval,stepsInterval$teps)
table (stepsInterval$interval,stepsInterval$steps)
stepsInterval[,stepsInterval$interval==835]
names(stepsInterval)
stepsInterval[stepsInterval$interval==835,]
stepsInterval
stepsInterval[which.max(stepsInterval$steps),]$interval
stepsInterval[which.max(stepsInterval$steps)]
stepsInterval[which.max(stepsInterval$steps),]$interval
stepsInterval[which.max(stepsInterval$steps),]
stepsInterval[which.max(stepsInterval$steps),1]
stepsInterval[which.max(stepsInterval$steps),0]
kk<-stepsInterval[which.max(stepsInterval$steps),]
kk
kk$interval
names(strepsInterval)
names(stepsInterval)
kk<-stepsInterval[which.max(stepsInterval$steps),[1]]
kk<-stepsInterval[which.max(stepsInterval$steps),[1]]
stepsInterval[which.max(stepsInterval$steps),[1]]
stepsInterval[which.max(stepsInterval$steps),0:1]
stepsInterval[which.max(stepsInterval$steps),]
row(stepsInterval[which.max(stepsInterval$steps),])
?row
row(which.max(stepsInterval$steps))
?row.names.data.frame()
row.names(stepsInterval)
row.names(stepsInterval[which.max(stepsInterval$steps,])
row.names(stepsInterval[which.max(stepsInterval$steps),])
stepsInterval[,104]
stepsInterval[,104]$interval
stepsInterval[104,]$interval
as.POSIx(format(stepsInterval[104,]$interval,format = "%H:%M"))
as.POSIxt(format(stepsInterval[104,]$interval,format = "%H:%M"))
time<-as.Date(stepsInterval[interval,]$interval,format="%H:%M")
interval<-row.names(stepsInterval[which.max(stepsInterval$steps),])
#Time with the maximun number of steps
time<-as.Date(stepsInterval[interval,]$interval,format="%H:%M")
time<-as.Date(stepsInterval[interval,]$interval
)
time<-as.Date(stepsInterval[interval,]$interval)
time<-as.Date.numeric(stepsInterval[interval,]$interval)
time<-as.POSIXct(stepsInterval[interval,]$interval)
time<-as.POSIXct.numeric(stepsInterval[interval,]$interval)
stepsInterval[interval,]$interval
?as.Date
time<-as.Date(stepsInterval[interval,]$interval,"%H:%M")
time<-as.Date(as.character(stepsInterval[interval,]$interval),"%H:%M")
time
as.character(stepsInterval[interval,]$interval
)
kk<-as.Date(as.character(stepsInterval[interval,]$interval),"%H:%M")
kk
time=as.POSIXct(stepsInterval[interval,]$interval)
time=as.POSIXct(stepsInterval[interval,]$interval)
time=as.POSIXct(as.character(stepsInterval[interval,]$interval))
cleanTotal<-aggregate(steps~date,data=cleanDat,sum)
head(cleanTotal)
cleanTotal<-aggregate(steps~date,data=cleanDat,sum)
cleanDat <- dat
cleanTotal<-aggregate(steps~date,data=cleanDat,sum)
cleanTotal$Day <-weekdays(as.Date(as.character(cleanTotal$date)))
#add weekend value to our cleanData
cleanTotal$DayType <- as.factor(c("Weekend","Weekday"))
datDay<-cleanDat
#Make Function To Return Either "Weekday" or "Weekend"
daytype = function(x){
if(x %in% c('Saturday', 'Sunday')){
return('Weekend')
}
return('Weekday')
}
#Add Name of Week
datDay$dayname = weekdays(as.Date(datDay$date))
#Add Factor Variable To Differentiate Weekday and Weekend
datDay$daytype = as.factor(apply(as.matrix(datDay$dayname), 1, daytype))
str(datDay)
unique(datDay[,c(dayname,daytype)])
unique(datDay[,daytype])
datDay[,daytype=="weekend"]
datDay[daytype=="weekend",]
unique(datDay$daytype)
unique(datDay$dayname)
sessionInfo()
?Sys.setlocale
datDay<-cleanDat
Sys.setlocale("LC_TIME", "English")
#Make Function To Return Either "Weekday" or "Weekend"
daytype = function(x){
if(x %in% c('Saturday', 'Sunday')){
return('Weekend')
}
return('Weekday')
}
#Add Name of Week
datDay$dayname = weekdays(as.Date(datDay$date))
#Add Factor Variable To Differentiate Weekday and Weekend
datDay$daytype = as.factor(apply(as.matrix(datDay$dayname), 1, daytype))
str(datDay)
```
* Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). The plot should look something like the following, which was creating using simulated data:
```{r echo=TRUE}
datDay<-aggregate(steps~date+daytype,data=datDay,mean)
str(datDay)
datDay
?as.Date
?time
time<-which.max(stepsInterval$steps)
time
time<-which.max(stepsInterval$interval)
time
time<-stepsInterval[which.max(stepsInterval$steps),]$interval
time
as.ts(time)
strptime(time,format="%H%M")
strptime(time,format="%H:%M")
KK<-strptime(as.character(time),format="%H:%M")
kk
str(time)
as.character(time)
format(as.character(time),"%H:%M")
time
str(time)
as.POSIXct(time)
as.POSIXct(as.character(time))
as.POSIXct(as.character(time),format="%H:%M")
as.POSIXct(as.character(time),format="tz")
sprintf("%02d:%02d",time)
time<-stepsInterval[which.max(stepsInterval$steps),]$interval
hh<-time %/% 100
mm<-time %% 100
time<-sprintf("%02d:%02d", hh, mm)
time
hh
mm
mean(total$steps)
install.packages("xtable")
library(xtable)
xt<-xtable(summary(datDay))
print(xt,type='html')
print(xt)
library(xtable)
xt<-xtable(datDay)
print(xt,type='html')
library(xtable)
xt<-xtable(datDay)
print(xt)
table(datDay)
table(datDay$daytype,datDay$daytype)
table(datDay$daytype,datDay$steps)
weekday<-datDay[daytype=="Weekday",1:2]
names(datDay)
datDay<-cleanDat
Sys.setlocale("LC_TIME", "English")
#Make Function To Return Either "Weekday" or "Weekend"
daytype = function(x){
if(x %in% c('Saturday', 'Sunday')){
return('Weekend')
}
return('Weekday')
}
#Add Name of Week
datDay$dayname = weekdays(as.Date(datDay$date))
#Add Factor Variable To Differentiate Weekday and Weekend
datDay$daytype = as.factor(apply(as.matrix(datDay$dayname), 1, daytype))
str(datDay)
datDay<-aggregate(steps~interval+daytype,data=datDay,mean)
names(datDay)
weekday<-datDay[daytype=="Weekday",]
weekday<-datDay[daytype=="Weekday",1-3]
weekday<-datDay[daytype=="Weekday",c("interval","steps")]
kk<-datDay[daytype=="Weekday",c("interval","steps")]
kk<-datDay[daytype=='Weekday',c("interval","steps")]
kk<-datDay[daytype=='Weekday',]$interval
str(datDay)
kk<-datDay[as.character(daytype)=='Weekday',]$interval
kk<-datDay[(as.character(daytype))=='Weekday',]$interval
